/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.jump.sld.editor;

import com.vividsolutions.jump.workbench.ui.style.StylePanel;

import org.apache.log4j.Logger;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

import org.openide.util.NbBundle;

import java.io.StringReader;

import de.cismet.cismap.commons.featureservice.AbstractFeatureService;
import de.cismet.cismap.commons.featureservice.FeatureServiceUtilities;
import de.cismet.cismap.commons.featureservice.WebFeatureService;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * Allows to change the query of the given service.
 *
 * @author   therter
 * @version  $Revision$, $Date$
 */
public class QueryPanel extends javax.swing.JPanel implements StylePanel {

    //~ Static fields/initializers ---------------------------------------------

    private static Logger LOG = Logger.getLogger(QueryPanel.class);

    //~ Instance fields --------------------------------------------------------

    private final AbstractFeatureService service;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butQueryEditor;
    private javax.swing.JLabel labQuery;
    private javax.swing.JScrollPane spQuery;
    private javax.swing.JTextArea taQuery;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form QueryPanel.
     *
     * @param  service  DOCUMENT ME!
     */
    public QueryPanel(final AbstractFeatureService service) {
        this.service = service;
        initComponents();
        if (service.getQuery() instanceof String) {
            taQuery.setText((String)service.getQuery());
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labQuery = new javax.swing.JLabel();
        spQuery = new javax.swing.JScrollPane();
        taQuery = new javax.swing.JTextArea();
        butQueryEditor = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            labQuery,
            org.openide.util.NbBundle.getMessage(QueryPanel.class, "QueryPanel.labQuery.text", new Object[] {})); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 10);
        add(labQuery, gridBagConstraints);

        taQuery.setColumns(20);
        taQuery.setRows(15);
        spQuery.setViewportView(taQuery);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        add(spQuery, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            butQueryEditor,
            org.openide.util.NbBundle.getMessage(
                QueryPanel.class,
                "QueryPanel.butQueryEditor.text",
                new Object[] {})); // NOI18N
        butQueryEditor.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    butQueryEditorActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        add(butQueryEditor, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * Opens the QuerySearchDialog.
     *
     * @param  evt  DOCUMENT ME!
     */
    private void butQueryEditorActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_butQueryEditorActionPerformed
        final QuerySearchDialog dialog = new QuerySearchDialog(StaticSwingTools.getParentFrame(this),
                true,
                service,
                taQuery);

        final Object oldQuery = service.getQuery();
        String query = "";

        if (service instanceof WebFeatureService) {
            final WebFeatureService wfs = (WebFeatureService)service;
            final Element e = wfs.getFeature()
                        .getWFSCapabilities()
                        .getServiceFacade()
                        .getGetFeatureQuery(wfs.getFeature());

            query = FeatureServiceUtilities.elementToString(e);
        }

        service.setQuery(query);
        dialog.setVisible(true);
        service.setQuery(oldQuery);
    } //GEN-LAST:event_butQueryEditorActionPerformed

    /**
     * Synchronises the definition query of the service with the query of this panel.
     */
    public void syncServiceWithPanel() {
        if (service instanceof WebFeatureService) {
            try {
                final SAXBuilder builder = new SAXBuilder();
                final Document doc = builder.build(new StringReader(taQuery.getText()));
                final WebFeatureService wfs = (WebFeatureService)service;
                wfs.setQueryElement((Element)doc.getRootElement().clone());
            } catch (Exception e) {
                LOG.error("Query is not a valid xml document", e);
            }
        }
        service.setQuery(taQuery.getText());
    }

    @Override
    public String getTitle() {
        return NbBundle.getMessage(QueryPanel.class, "QueryPanel.getTitle()");
    }

    @Override
    public void updateStyles() {
    }

    @Override
    public String validateInput() {
        return null;
    }
}
